from Crypto.Util.number import inverse, long_to_bytes
from sympy.ntheory.modular import solve_congruence


N = 489654925303072532553659432557377999607856370197579144782976005904927235244321459117898721690940319487769632950077647476152880207627385231603017537961906244964117707813500615680799967895028255666319186794462243666159201392490299439947399915406223652423977002396844720487588735149486903743362109592536081726574342051928022071576485169655694281378301551060632699138055044915993078059902577590451519251321215765308977494770310317350866241246677761542212605478044672014913289740381478940929584556588858045439572693806615268502627912952686133840081188641597461343817750411035667135310831687533531094008308185320371643348451
CT = 58535947031303233853656030097871859886777764034955095086618901763996192727846608049414977429851683454541344096765319691912454768331685486037922533236779909508856486986528041125267338846421238077083738092020495236946742989769815669001100361743526446503248639704900983287986142636083524250650662602975802778548032518674346903013262799229594298599457623347987250272218522320743415393958131916181915804368140008312975210397791293701839101635851486434802271100141743496402698229558250485987421664294229816166263965806962242894230766553316312608696594536239328785792283453559549564751529321240567418095487324718881437825650
e = 65537

# found with https://www.alpertron.com.ar/ECM.HTM
p = 9352496155192295944243473644483853835662636576410969996619180877861158926367873785037099054018741236476166923118647057249968914650337399039210616026612969
q = 1870499231038459188848694728896770767132527315282193999323836175572231785273574757007419810803748247295233384623729411449937829300674798078421232053225939
r = 37409984620769183776973894577935415342650546305643879986476723511444635705471495140148396216074964945904667692474588228999875658601349596156842464106451879
s = 74819969241538367553947789155870830685301092611287759972953447022889271410942990280296792432149929891809335384949176457999751317202699192313684928212903759


d1 = inverse(e, p - 1)
d2 = inverse(e, q - 1)
d3 = inverse(e, r - 1)
d4 = inverse(e, s - 1)

# congruen»õele pentru CRT
congruences = [
    (CT % p, p),
    (CT % q, q),
    (CT % r, r),
    (CT % s, s)
]


crt_result = solve_congruence(*congruences)


if crt_result:
    combined_CT = crt_result[0]
    flag_number = pow(combined_CT, d1, p)
    flag = long_to_bytes(flag_number).decode()
    print(f"Flag: {flag}")
else:
    print("no result")
